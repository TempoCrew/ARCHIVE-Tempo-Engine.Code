package engine.backend.util;

import haxe.io.Bytes;
import haxe.io.Path;
import systools.Dialogs;

class FileUtil
{
	/**
	 * Create `FILEFILTERS` for variables.
	 * @param count how many file types you need?
	 * @param descriptions Extensions descriptions (ex: if in `extensions` will a `"*.txt"`, you write here a `"Text Files"` or else)
	 * @param extensions File extensions type (`*.txt`, `*.jpg`, `*.png`, `*.tsg`, `*.json`). Or you can combo a extensions with symbol `;` (`*.txt;*.json;*.dat` and etc.)
	 * @return FILEFILTERS
	 */
	public static function dialog_createFilters(count:Int, descriptions:Array<String>, extensions:Array<String>):FILEFILTERS
	{
		final result:FILEFILTERS = {
			count: count,
			descriptions: descriptions,
			extensions: extensions
		};

		return result;
	}

	public static function dialog_folder(title:String = "Select a Folder", ?msg:String = "Select a folder direction"):String
	{
		final result = Dialogs.folder(title, msg);
		return result;
	}

	public static function dialog_openFile(title:String = "Select File", ?msg:String = "Select one or more files.", filters:FILEFILTERS,
			?multi:Bool = true):Array<String>
	{
		final result = Dialogs.openFile(title, msg, filters, multi);
		return result;
	}

	public static function dialog_saveFile(title:String = "Select a Direction for Saving", ?msg:String = "Select direction.", filters:FILEFILTERS):String
	{
		final result = Dialogs.saveFile(title, msg, Sys.getCwd(), filters);
		return result;
	}

	/**
	 * Write byte file contents directly to a given path.
	 * Only works on desktop.
	 *
	 * @param path The path to the file.
	 * @param data The bytes to write.
	 * @param mode Whether to Force, Skip, or Ask to overwrite an existing file.
	 */
	public static function writeBytesToPath(path:String, data:Bytes, mode:FileWriteMode = Skip):Void
	{
		#if sys
		createFolderIfNotExist(Path.directory(path));
		switch (mode)
		{
			case Force:
				File.saveBytes(path, data);
			case Skip:
				if (!FileSystem.exists(path))
					File.saveBytes(path, data);
			case Ask:
				if (FileSystem.exists(path))
					throw 'File already exists: $path';
				else
					File.saveBytes(path, data);
		}
		#else
		throw 'Direct file writing by path not supported on this platform.';
		#end
	}

	#if linux
	/**
	 * Linux constant command for CMD (idk, my system is Windows)
	 */
	static final LINUX_COMMAND_TITLE:String = '/usr/bin/xdg-open';
	#end

	/**
	 * Opened browser, and with him current site
	 * @param site current url
	 * @param NOT_NEED_A_HTTPS ermm, for site `https://` not needed?
	 */
	inline public static function openURL(site:String, ?NOT_NEED_A_HTTPS:Bool = false)
	{
		if (site == null || site == "")
			return;

		if (!site.startsWith('https://') && !NOT_NEED_A_HTTPS)
		{
			final parentSite:String = site;
			site = 'https://$parentSite';

			trace('URL Opening: a starting text \'https://\' not writed, generating auto...');
		}

		#if linux
		Sys.command(LINUX_COMMAND_TITLE, [site]);
		#else
		flixel.FlxG.openURL(site);
		#end
	}

	/**
	 * Opening a game folder (or if `a` is true, then: opening a PC folder, idk :D)
	 * @param f current folder
	 * @param a absolute open this in PC or no
	 */
	inline public static function openFolder(f:String, a:Bool = false):Void
	{
		#if sys
		if (!a)
			f = Sys.getCwd() + f;

		f = f.replace('/', '\\');
		if (f.endsWith('/'))
			f.substr(0, f.length - 1);

		final c:String = #if linux LINUX_COMMAND_TITLE #else 'explorer.exe' #end;
		Sys.command(c, [f]);
		Sys.println('Opened a folder: $f');
		#else
		trace('[WARNING] This platform not supported this function!');
		return;
		#end
	}

	/**
	 * Creating direction if current direction not exists in game folder
	 * @param path current direction path
	 */
	public static function createFolderIfNotExist(path:String):Void
	{
		#if sys
		if (sys.FileSystem.exists(path))
			return;
		FileSystem.createDirectory(path);
		#end

		return;
	}

	#if tjson
	public static inline function createTJSON<T:Dynamic>(path:String, data:T):Void
		File.saveContent(path, '// Generated by: TJSON Encoder (${Constants.GENERATED_BY})\n${tjson.TJSON.encode(data, new tempo.types.TempoTJSONStyle())}');
	#end

	/**
	 * Returned a file data
	 * @param file path of file (with extension!)
	 */
	public static function getText(file:String):String
		return #if sys File.getContent(file) #else openfl.Assets.getText(file) #end;
}

enum FileWriteMode
{
	/**
	 * Forcibly overwrite the file if it already exists.
	 */
	Force;

	/**
	 * Ask the user if they want to overwrite the file if it already exists.
	 */
	Ask;

	/**
	 * Skip the file if it already exists.
	 */
	Skip;
}
